import pandas as pd

AUD2
=====

data = pd.DataFrame(matrix,columns=[1,2,3,4]) || df = pd.DataFrame(dict)
data.head() - prvi n redici
data.describe()
#         karakteristiki za sekoja kolona
data["atribut"]
#         samo taa redica
data["atribut"].quantile([0.25,0.5,0.75])
data["age"].mean()
data[['att1', 'att2']]

cp_age_mean = data.groupby('cp')['age'].mean()
#          will group the values of cp calculate the average age per chest pain type
print(cp_age_mean)

cp_counts = data.groupby('cp').size()
print(cp_counts)
cp_counts = data.groupby('cp').size()[0]
#       broj na pati so cp bilo = 0

data.cp.value_counts().plot.bar() #in pandas , mozhe oi vo matplotlib
plt.show()
====>data/sliki/AUD2/bar_chart_pandas.png

data = data.sort_values('age')

grouped_chol = data.groupby('age')['chol'].mean()

data['age_grouped'] = data['age'] // 10 * 10
#       ova e vazno, vaka menuvas kolona...
#       ustvari datafrejmot e mapa => atribut kluch , niza od vrednosti kako vrednost

#       mnogu jako nesto, da groupirash spored dve
grouped = data.groupby(['age_grouped', 'cp'])['chol'].mean()

grouped_sex_cp = data.groupby(['sex', 'cp']).size().reset_index()
grouped_sex_cp = grouped_sex_cp.rename(columns={0: 'count'})
grouped_sex_cp

#       sortiranje po dve i grupiranje
grouped = data.groupby(['age_grouped', 'cp']).size().reset_index()
grouped = grouped.rename(columns={0:"count"})
grouped = grouped.sort_values(['age_grouped', 'cp'])

AUD 3
=====

data.info()
data.isnull().sum()

data = data.dropna(subset=['RoomService'], axis=0)
#       This line removes all rows that have missing (NaN) values in the 'RoomService' column.
print(data["RoomService"].isnull().sum())

data["Age"] = data["Age"].fillna(data.Age.mean())
#       gi popolnuva site missing vrednosti so prosekot


data[['VRDeck', 'Spa']].plot.hist(subplots=True)
plt.show()
#       dva histograma


aq_data['NO2'] = aq_data['NO2'].bfill()
aq_data['CO'] = aq_data['CO'].ffill()
#       popolnuvanje nanapred i nanazad so ista vrednost

aq_data['PM10'] = aq_data['PM10'].interpolate(limit_direction='both')
#       popolnuva vo odnos na vrednostite pogore i podole

data['CryoSleep_Enc'] = data.CryoSleep.apply(funkcija)
#       menuva vrednosti spored f-ja

one_hot_destination = pd.get_dummies(data.Destination)
data = pd.concat([data, one_hot_destination], axis=1)
# one_hot encoder



